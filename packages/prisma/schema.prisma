generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


generator nestgraphql {
  provider                  = "node node_modules/prisma-nestjs-graphql"
  output                    = "../db-generated-types/src"
  purgeOutput               = true
  emitSingle                = true
  combineScalarFilters      = true
  noAtomicOperations        = true

  // Validation decorators
  fields_Validator_input    = true
  fields_Validator_output   = true
  fields_Validator_model    = true
  fields_Validator_from     = "class-validator"

  // For args | where | nested
  decorate_1_type           = "*Args"
  decorate_1_field          = "@(data|where)"
  decorate_1_name           = "ValidateNested"
  decorate_1_from           = "class-validator"
  decorate_1_arguments      = "[]"
}

model User {
  id        String           @id @default(uuid())
  email     String           @unique
  name      String?
  xp        Int              @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  progress  LessonProgress[]
}

model Language {
  id        String   @id @default(uuid())
  name      String   @unique
  topics    Topic[]
  createdAt DateTime @default(now())
}

model Topic {
  id         String   @id @default(uuid())
  title      String
  language   Language @relation(fields: [languageId], references: [id])
  languageId String
  lessons    Lesson[]
  createdAt  DateTime @default(now())
}

model Lesson {
  id        String           @id @default(uuid())
  title     String
  content   String
  topic     Topic            @relation(fields: [topicId], references: [id])
  topicId   String
  tasks     Task[]
  progress  LessonProgress[]
  createdAt DateTime         @default(now())
}

model Task {
  id       String   @id @default(uuid())
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  lessonId String
  type     TaskType
  prompt   String
  options  String[]
  answer   String
  order    Int
}

model LessonProgress {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  lessonId    String
  completed   Boolean   @default(false)
  completedAt DateTime?
}

enum TaskType {
  MULTIPLE_CHOICE
  FILL_IN_THE_BLANK
  WRITE_CODE
}
